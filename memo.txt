// 会員情報を保存するテーブル
create table users(
    id int primary key auto_increment, 
    name varchar(50) not null,
    email varchar(50) not null unique,
    password varchar(100) not null,
    birthday varchar(10) not null,
    image varchar(100) not null,
    self_introducrion varchar(300),
    favorite_person varchar(100),
    favorite_place varchar(100),
    created_at timestamp default CURRENT_TIMESTAMP,
    updated_at timestamp
);

// 場所を保存するテーブル
create table places(
    id int primary key auto_increment, 
    user_id int not null,
    introduction varchar(300) not null,
    name varchar(100) not null,
    genre_name varchar(100) not,null,
    tel int not null,
    address varchar(200) not null,
    latitude int not null,
    longitude int not null,
    price varchar(100),
    open_time varchar(100) not null,,
    close_date varchar(100) not null,
    image1 varchar(100) not null,
    image2 varchar(100),
    image3 varchar(100),
    image4 varchar(100),
    image5 varchar(100),
    nearest_station varchar(200),
    booking varchar(100),
    update_at
    created_at timestamp default CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    foreign key(user_id) references users(id)
    on delete cascade
    on update cascade
);

// レビューを保存するテーブル
create table reviews (
    id int primary key auto_increment,
    user_id int not null,
    place_id int not null,
    month int not null,
    title varchar(100) not null,
    content varchar(300) not null, 
    image1 varchar(100) not null,
    image2 varchar(100),
    image3 varchar(100),
    image4 varchar(100),
    created_at timestamp default CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    foreign key(user_id) references users(id)
    on delete cascade
    on update cascade,
    foreign key(place_id) references places(id)
    on delete cascade
    on update cascade
);

//お気に入りを保存するテーブル
create table favorites (
    id int primary key auto_increment,
    user_id int not null,
    place_id int not null,
    foreign key(user_id) references user(id)
    on delete cascade
    on update cascade,
    foreign key(place_id) references places(id)
    on delete cascade
    on update cascade
);